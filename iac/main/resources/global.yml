GlobalLogBucket:
  # checkov:skip=CKV_AWS_18: This is the log bucket for all other buckets - no need for a log bucket of the log bucket
  Type: 'AWS::S3::Bucket'
  Properties:
    AccessControl: Private
    BucketName: !Sub '${Environment}-dap-s3-logs'
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    VersioningConfiguration:
      Status: Enabled
    LifecycleConfiguration:
      Rules:
        - ExpirationInDays: 90
          Status: Enabled
    NotificationConfiguration:
      EventBridgeConfiguration:
        EventBridgeEnabled: true

GlobalLogBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref GlobalLogBucket
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Deny
          Action: 's3:*'
          Resource: !Sub ${GlobalLogBucket.Arn}/*
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport: false
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource: !Sub ${GlobalLogBucket.Arn}/*
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
        - Effect: Allow
          Action: s3:PutObject
          Principal:
            Service: logging.s3.amazonaws.com
          Resource: !Sub ${GlobalLogBucket.Arn}/*
          Condition:
            ArnLike:
              aws:SourceArn: !Sub arn:aws:s3:::${Environment}-dap-*
            StringEquals:
              aws:SourceAccount: !Ref AWS::AccountId

GlobalNonEventBucket:
  Type: 'AWS::S3::Bucket'
  Properties:
    AccessControl: Private
    BucketName: !Sub '${Environment}-dap-s3-non-event'
    LoggingConfiguration:
      DestinationBucketName: !Ref GlobalLogBucket
      LogFilePrefix: dap-s3-non-event/log
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    VersioningConfiguration:
      Status: Enabled
    LifecycleConfiguration:
      Rules:
        - ExpirationInDays: 365
          Status: Enabled
    NotificationConfiguration:
      EventBridgeConfiguration:
        EventBridgeEnabled: true

GlobalNonEventBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref GlobalNonEventBucket
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Deny
          Action: 's3:*'
          Resource: !Sub ${GlobalNonEventBucket.Arn}/*
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport: false
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource: !Sub ${GlobalNonEventBucket.Arn}/*
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root

VPCFlowLogsBucket:
  Type: 'AWS::S3::Bucket'
  Properties:
    AccessControl: Private
    BucketName: !Sub '${Environment}-dap-vpc-flow-logs'
    LoggingConfiguration:
      DestinationBucketName: !Ref GlobalLogBucket
      LogFilePrefix: dap-s3-flow-log/log
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    VersioningConfiguration:
      Status: Enabled
    LifecycleConfiguration:
      Rules:
        - ExpirationInDays: 90
          Status: Enabled
    NotificationConfiguration:
      EventBridgeConfiguration:
        EventBridgeEnabled: true

VPCFlowLogsBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref VPCFlowLogsBucket
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Deny
          Action: 's3:*'
          Resource: !Sub ${VPCFlowLogsBucket.Arn}/*
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport: false
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource: !Sub ${VPCFlowLogsBucket.Arn}/*
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root

S3NotificationsLoggerLambda:
  # checkov:skip=CKV_AWS_116: DLQ not needed as this lambda just does logging
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub s3-notifications-logger-${Environment}
    Handler: s3-notifications-logger.handler
    Policies:
      - AWSLambdaBasicExecutionRole
    ReservedConcurrentExecutions: 10
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        ENVIRONMENT: !Ref Environment
    Tags:
      Environment: !Ref Environment
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref SubnetForDAP1
        - !Ref SubnetForDAP2
        - !Ref SubnetForDAP3

S3NotificationsLoggerEventBridgeRule:
  Type: AWS::Events::Rule
  Properties:
    Description: Rule to send all s3:ObjectCreated:* and s3:ObjectRemoved:* events to the logger lambda
    EventPattern:
      source:
        - aws.s3
      detail-type:
        - Object Created
        - Object Deleted
    Name: !Sub ${Environment}-dap-s3-notifications-logger-eventbridge-rule
    State: ENABLED
    Targets:
      - Id: s3-notifications-logger-lambda
        Arn: !GetAtt S3NotificationsLoggerLambda.Arn

S3BucketNotificationLambdaPermission:
  Type: AWS::Lambda::Permission
  Properties:
    FunctionName: !Ref S3NotificationsLoggerLambda
    Action: lambda:InvokeFunction
    Principal: events.amazonaws.com
    SourceAccount: !Sub ${AWS::AccountId}
    SourceArn: !GetAtt S3NotificationsLoggerEventBridgeRule.Arn

GlueSecurityConfig:
  Type: AWS::Glue::SecurityConfiguration
  Properties:
    Name: !Sub ${Environment}-dap-glue-security-configuration
    EncryptionConfiguration:
      CloudWatchEncryption:
        CloudWatchEncryptionMode: SSE-KMS
        KmsKeyArn: !GetAtt KmsKey.Arn
      JobBookmarksEncryption:
        JobBookmarksEncryptionMode: CSE-KMS
        KmsKeyArn: !GetAtt KmsKey.Arn
      S3Encryptions:
        - S3EncryptionMode: SSE-KMS
          KmsKeyArn: !GetAtt KmsKey.Arn

TestSupportLambda:
  # checkov:skip=CKV_AWS_116: DLQ not needed as this lambda is just for testing
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub test-support-${Environment}
    Handler: test-support.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Effect: Allow
            Action: lambda:GetEventSourceMapping
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:event-source-mapping:*
          - Effect: Allow
            Action: lambda:ListEventSourceMappings
            Resource: '*'
          - Effect: Allow
            Action:
              - logs:FilterLogEvents
              - logs:GetLogEvents
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:GetBucketLocation
              - s3:ListBucket
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${Environment}-dap*
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:Encrypt
            Resource: !GetAtt KmsKey.Arn
          - Effect: Allow
            Action:
              - states:DescribeExecution
              - states:ListExecutions
              - states:StartExecution
            Resource: '*'
          - Effect: Allow
            Action:
              - athena:GetQueryExecution
              - athena:GetQueryResults
              - athena:StartQueryExecution
              - glue:GetDatabase
              - glue:GetPartition
              - glue:GetPartitions
              - glue:GetTable
              - glue:GetTables
            Resource: '*'
          - Effect: Allow
            Action: sqs:GetQueueUrl
            Resource: '*'
          - Effect: Allow
            Action: firehose:DescribeDeliveryStream
            Resource: '*'
          - Effect: Allow
            Action:
              - redshift-data:DescribeStatement
              - redshift-data:ExecuteStatement
              - redshift-data:GetStatementResult
            Resource: '*'
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !Ref RedshiftSecret
    ReservedConcurrentExecutions: 40
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        ENVIRONMENT: !Ref Environment
        REDSHIFT_SECRET_ARN: !Ref RedshiftSecret
    Tags:
      Environment: !Ref Environment
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref SubnetForDAP1
        - !Ref SubnetForDAP2
        - !Ref SubnetForDAP3

TestSupportLambdaTestingContainerPermission:
  Type: AWS::Lambda::Permission
  Condition: UseTestingContainers
  Properties:
    Action: lambda:InvokeFunction
    FunctionName: !Ref TestSupportLambda
    Principal: !Ref TestRoleArn

KmsKey:
  Type: AWS::KMS::Key
  Properties:
    EnableKeyRotation: true
    KeyPolicy:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Action: kms:*
          Resource: '*'
        - Effect: Allow
          Principal:
            Service:
              - cloudwatch.amazonaws.com
              - cloudtrail.amazonaws.com
              - lambda.amazonaws.com
              - s3.amazonaws.com
              - sns.amazonaws.com
              - sqs.amazonaws.com
              - logs.amazonaws.com
              - logs.eu-west-2.amazonaws.com
              - glue.amazonaws.com
              - redshift.amazonaws.com
              - redshift-serverless.amazonaws.com
              - chatbot.amazonaws.com
              - events.amazonaws.com
            AWS:
              - !GetAtt RawGlueCrawlerRole.Arn
              - !GetAtt StepFunctionRole.Arn
              - !GetAtt GlueScriptsExecutionRole.Arn
              - !GetAtt StepFunctionRedshiftProcessRole.Arn
          Action:
            - kms:Encrypt*
            - kms:Decrypt*
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:Describe*
          Resource: '*'

KmsKeyAlias:
  Type: AWS::KMS::Alias
  Properties:
    AliasName: !Sub alias/${Environment}-dap-key
    TargetKeyId: !Ref KmsKey


FlowLogRole:
  Type: 'AWS::IAM::Role'
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - 'vpc-flow-logs.amazonaws.com'
          Action:
            - 'sts:AssumeRole'
    Policies:
      - PolicyName: 'FlowLogPermissions'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
              Resource: !Sub 'arn:aws:s3:::${VPCFlowLogsBucket}/*'


AWSSupportReadOnlyRole:
  Type: 'AWS::IAM::Role'
  Properties:
    RoleName: 'AWS-Support-ReadOnly-demo'
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: 'Allow'
          Principal:
            Service:
              - 'support.amazonaws.com'
          Action:
            - 'sts:AssumeRole'
    Path: '/'
    Policies:
      - PolicyName: 'ReadOnlyAccess'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'athena:List*'
                - 'athena:Describe*'
                - 'states:List*'
                - 'states:Describe*'
                - 'redshift:Describe*'
                - 'ec2:Describe*'
                - 'vpc:Describe*'
                - 'iam:List*'
                - 'iam:Get*'
                - 'events:Describe*'
                - 'events:List*'
                - 'lambda:List*'
                - 'lambda:Get*'
              Resource: '*'

TrailBucket:
  Type: 'AWS::S3::Bucket'
  Properties:
    AccessControl: Private
    BucketName: !Sub '${Environment}-dap-cloud-trail'
    LoggingConfiguration:
      DestinationBucketName: !Ref GlobalLogBucket
      LogFilePrefix: cloudtrail/trail
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    VersioningConfiguration:
      Status: Enabled
    LifecycleConfiguration:
      Rules:
        - ExpirationInDays: 90
          Status: Enabled
    NotificationConfiguration:
      EventBridgeConfiguration:
        EventBridgeEnabled: true

TrailBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref TrailBucket
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Sid: AllowCloudTrailWrites
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action:
            - s3:PutObject
          Resource: !Sub '${TrailBucket.Arn}/*'
          Condition:
            Bool:
              aws:SecureTransport: true
        - Sid: AllowCloudTrailBucketRead
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action:
            - s3:GetBucketAcl
          Resource: !Sub '${TrailBucket.Arn}'
        - Sid: 'AllowSSLRequestsOnly'
          Effect: Deny
          Action: 's3:*'
          Resource:
            - !Sub '${TrailBucket.Arn}/*'
          Principal: '*'
          Condition:
            Bool:
              'aws:SecureTransport': 'false'

CloudTrailForUnauthorizedAPIChanges:
  Type: 'AWS::CloudTrail::Trail'
  Properties:
    S3BucketName: !Ref TrailBucket
    IncludeGlobalServiceEvents: true
    IsLogging: true
    IsMultiRegionTrail: true
    KMSKeyId: !Sub alias/${Environment}-dap-key
    TrailName: UnauthorizedAPICallTrail
    EventSelectors:
      - ReadWriteType: 'All'
    CloudWatchLogsLogGroupArn: !GetAtt UnauthorizedApiCallLogGroup.Arn
    CloudWatchLogsRoleArn: !GetAtt CloudTrailCloudWatchLogsRole.Arn
    EnableLogFileValidation: true

UnauthorizedApiCallLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: !Sub /aws/dap-cloud-trail-log-group
    KmsKeyId: !GetAtt KmsKey.Arn
    RetentionInDays: 30

UnauthorizedApiCallMetricFilter:
  Type: 'AWS::Logs::MetricFilter'
  Properties:
    LogGroupName: !Ref UnauthorizedApiCallLogGroup
    FilterPattern: '{($.errorCode = "AccessDenied") || ($.errorCode = "UnauthorizedOperation")}'
    MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: 'CloudTrailMetrics'
        MetricName: 'UnauthorizedAPICallCount'

UnauthorizedApiCallAlarm:
  Type: 'AWS::CloudWatch::Alarm'
  Properties:
    AlarmName: UnauthorizedAPICallAlarm
    MetricName: UnauthorizedAPICallCount
    Namespace: CloudTrailMetrics
    Statistic: Sum
    Period: 300
    EvaluationPeriods: 1
    Threshold: 1
    ComparisonOperator: GreaterThanOrEqualToThreshold
    AlarmActions:
      - !Ref UnauthorizedApiCallSNSTopic

CloudTrailCloudWatchLogsRole:
  Type: 'AWS::IAM::Role'
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: 'Allow'
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 'sts:AssumeRole'
    Policies:
      - PolicyName: CloudTrailToCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource:
                - !GetAtt UnauthorizedApiCallLogGroup.Arn
                - !GetAtt IAMChangeLogGroup.Arn

IAMChangeLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: !Sub /aws/dap-IAM-changes-log-group
    KmsKeyId: !GetAtt KmsKey.Arn
    RetentionInDays: 30

CloudTrailForIAMChanges:
  Type: 'AWS::CloudTrail::Trail'
  Properties:
    S3BucketName: !Ref TrailBucket
    IncludeGlobalServiceEvents: true
    IsLogging: true
    IsMultiRegionTrail: true
    KMSKeyId: !Sub alias/${Environment}-dap-key
    TrailName: IAMPolicyChangeTrail
    CloudWatchLogsLogGroupArn: !GetAtt IAMChangeLogGroup.Arn
    CloudWatchLogsRoleArn: !GetAtt CloudTrailCloudWatchLogsRole.Arn
    EnableLogFileValidation: true

IAMChangeMetricFilter:
  Type: 'AWS::Logs::MetricFilter'
  Properties:
    LogGroupName: !Ref IAMChangeLogGroup
    FilterPattern: '{ ($.eventName = "CreatePolicy") || ($.eventName = "DeletePolicy") || ($.eventName = "AttachRolePolicy") || ($.eventName = "DetachRolePolicy") || ($.eventName = "AttachUserPolicy") || ($.eventName = "DetachUserPolicy") || ($.eventName = "AttachGroupPolicy") || ($.eventName = "DetachGroupPolicy") || ($.eventName = "UpdateAssumeRolePolicy") || ($.eventName = "PutRolePolicy") || ($.eventName = "PutUserPolicy") || ($.eventName = "PutGroupPolicy") }'
    MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: 'IAMPolicyMetrics'
        MetricName: 'IAMPolicyChangeCount'

IAMChangeAlarm:
  Type: 'AWS::CloudWatch::Alarm'
  Properties:
    AlarmName: IAMPolicyChangeAlarm
    MetricName: IAMPolicyChangeCount
    Namespace: IAMPolicyMetrics
    Statistic: Sum
    Period: 300
    EvaluationPeriods: 1
    Threshold: 1
    ComparisonOperator: GreaterThanOrEqualToThreshold
    AlarmActions:
      - !Ref IAMChangeAlertSNSTopic

IAMChangeAlertSNSTopic:
  Type: 'AWS::SNS::Topic'
  Properties:
    DisplayName: 'IAM Policy Change Alert'
    TopicName: 'IAMPolicyChangeAlert'
    KmsMasterKeyId: !GetAtt KmsKey.Arn

IAMChangeAlertSNSTopicSubscription:
  Type: 'AWS::SNS::Subscription'
  Condition: IsProduction
  Properties:
    Protocol: 'email'
    Endpoint: 'dap-notifications@digital.cabinet-office.gov.uk'
    TopicArn: !Ref IAMChangeAlertSNSTopic

UnauthorizedApiCallSNSTopic:
  Type: 'AWS::SNS::Topic'
  Properties:
    DisplayName: 'Unauthorized API Call Alert'
    TopicName: 'UnauthorizedApiCallAlert'
    KmsMasterKeyId: !GetAtt KmsKey.Arn

UnauthorizedApiCallSNSTopicSubscription:
  Type: 'AWS::SNS::Subscription'
  Properties:
    Protocol: 'email'
    Endpoint: 'dap-notifications@digital.cabinet-office.gov.uk'
    TopicArn: !Ref UnauthorizedApiCallSNSTopic
