DAPNotificationsTopic:
  Type: AWS::SNS::Topic
  Properties:
    TopicName: !Sub ${AWS::StackName}-alerts-notification-topic
    KmsMasterKeyId: !GetAtt KmsKey.Arn

DAPNotificationsTopicSubscribePolicy:
  Type: AWS::SNS::TopicPolicy
  Properties:
    PolicyDocument:
      Id: AllowSnsSubscribe
      Version: '2012-10-17'
      Statement:
        - Sid: AllowDAPAccount
          Effect: Allow
          Action:
            - sns:Subscribe
          Principal:
            AWS:
              - !Sub ${AWS::AccountId}
          Resource: !Ref DAPNotificationsTopic
    Topics:
      - !Ref DAPNotificationsTopic

DAPNotificationChatbotRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: !Sub ${AWS::StackName}-notifications-chatbot-role
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - chatbot.amazonaws.com
          Action:
            - sts:AssumeRole
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSResourceExplorerReadOnlyAccess

DAPNotificationsChatbotConfiguration:
  Type: AWS::Chatbot::SlackChannelConfiguration
  Properties:
    ConfigurationName: !Sub ${AWS::StackName}-alerts-notifications-chatbot-config
    GuardrailPolicies:
      - arn:aws:iam::aws:policy/ReadOnlyAccess
    IamRoleArn: !GetAtt DAPNotificationChatbotRole.Arn
    LoggingLevel: NONE
    SlackChannelId: !FindInMap [DAPNotificationsSlackChannelIds, !Ref Environment, SlackChannelId]
    SlackWorkspaceId: !Ref SlackWorkspaceId
    SnsTopicArns:
      - !Ref DAPNotificationsTopic
