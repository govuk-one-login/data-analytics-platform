IAMRoleRedshiftServerless:
  Type: 'AWS::IAM::Role'
  Properties:
    RoleName: !Sub ${Environment}-redshift-serverless-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service:
              [firehose.amazonaws.com, redshift.amazonaws.com, glue.amazonaws.com, redshift-serverless.amazonaws.com]
          Action: 'sts:AssumeRole'
    MaxSessionDuration: 3600
    Policies:
      - PolicyName: !Sub ${Environment}-redshift-serverless-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:AbortMultipartUpload'
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:ListBucket'
                - 's3:ListBucketMultipartUploads'
                - 's3:PutObject'
              Resource:
                - !Sub 'arn:aws:s3:::${RawLayerBucket}'
                - !Sub 'arn:aws:s3:::${RawLayerBucket}/*'
                - !Sub 'arn:aws:s3:::${StageLayerBucket}'
                - !Sub 'arn:aws:s3:::${StageLayerBucket}/*'
                - !Sub 'arn:aws:s3:::${ELTMetadataBucket}'
                - !Sub 'arn:aws:s3:::${ELTMetadataBucket}/*'
            - Effect: Allow
              Resource: !Sub arn:aws:glue:eu-west-2:${AWS::AccountId}:*
              Action:
                - 'glue:GetTable'
                - 'glue:GetTables'
                - 'glue:GetDatabase'
                - 'glue:GetDatabases'
                - 'glue:GetPartitions'
            - Effect: Allow
              Resource: !GetAtt KmsKey.Arn
              Action:
                - 'kms:Decrypt'
                - 'kms:Encrypt'
                - 'kms:DescribeKey'
                - 'kms:ReEncrypt'
                - 'kms:GenerateDataKey'

QuickSightEnvironmentPolicy:
  Type: 'AWS::IAM::Policy'
  Condition: IsQuicksightEnvironment
  Properties:
    PolicyName: !Sub ${Environment}-analysts-bucket-policy
    Roles:
      - !Ref IAMRoleRedshiftServerless
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: 'Allow'
          Action:
            - 's3:AbortMultipartUpload'
            - 's3:GetBucketLocation'
            - 's3:GetObject'
            - 's3:ListBucket'
            - 's3:ListBucketMultipartUploads'
            - 's3:PutObject'
          Resource:
            - !Sub 'arn:aws:s3:::${DAPAnalystsFilesBucket}'
            - !Sub 'arn:aws:s3:::${DAPAnalystsFilesBucket}/*'

RedshiftSecret:
  Type: 'AWS::SecretsManager::Secret'
  Properties:
    Description: This is a Secrets Manager secret for a Redshift cluster
    GenerateSecretString:
      # based on https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_secret_json_structure.html#reference_secret_json_structure_RS
      SecretStringTemplate: !Sub |
        {
          "engine": "redshift",
          "host": "${Environment}-redshift-serverless-workgroup.${AWS::AccountId}.${AWS::Region}.redshift-serverless.amazonaws.com",
          "username": "admin",
          "dbname": "${Environment}-redshift",
          "port": "5439"
        }
      GenerateStringKey: password
      PasswordLength: !Ref RedshiftSecretLength
      ExcludeCharacters: !Ref RedshiftSecretExcludeCharacters
    KmsKeyId: !Ref KmsKey
    Tags:
      - Key: RedshiftUser
        Value: admin

RedshiftSecretRotationSchedule:
  Type: AWS::SecretsManager::RotationSchedule
  DependsOn: RedshiftSecretRotationLambdaPermission
  Properties:
    RotationLambdaARN: !GetAtt RedshiftSecretRotationLambda.Arn
    RotationRules:
      ScheduleExpression: cron(0 2 1 * ? *) # the first day of every month at 2am
    SecretId: !Ref RedshiftSecret

RedshiftSecretRotationLambda:
  # checkov:skip=CKV_AWS_116: DLQ not needed
  Type: AWS::Serverless::Function
  Properties:
    # todo remove this once secretsmanager permissions have been added to secure pipelines permissions boundary
    PermissionsBoundary: !Ref AWS::NoValue
    FunctionName: redshift-rotate-secret
    Handler: redshift-rotate-secret.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
              - secretsmanager:PutSecretValue
              - secretsmanager:UpdateSecretVersionStage
            Resource: !Ref RedshiftSecret
          - Effect: Allow
            Action: secretsmanager:GetRandomPassword
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:GenerateDataKey
            Resource: !GetAtt KmsKey.Arn
            Condition:
              StringEquals:
                kms:EncryptionContext:SecretARN: !Ref RedshiftSecret
    ReservedConcurrentExecutions: 10
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        PASSWORD_LENGTH: !Ref RedshiftSecretLength
        PASSWORD_EXCLUDE_CHARS: !Ref RedshiftSecretExcludeCharacters
        ENVIRONMENT: !Ref Environment
    Tags:
      Environment: !Ref Environment
    MemorySize: 256
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
        - !Ref RedshiftAccessEC2SecurityGroup
      SubnetIds:
        - !Ref SubnetForDAP1
        - !Ref SubnetForDAP2
        - !Ref SubnetForDAP3

RedshiftSecretRotationLambdaPermission:
  Type: AWS::Lambda::Permission
  Properties:
    FunctionName: !Ref RedshiftSecretRotationLambda
    Action: lambda:InvokeFunction
    Principal: secretsmanager.amazonaws.com
    SourceArn: !Ref RedshiftSecret

RedshiftServerlessNamespace:
  Type: 'AWS::RedshiftServerless::Namespace'
  Properties:
    AdminUsername: !Sub '{{resolve:secretsmanager:${RedshiftSecret}::username}}'
    AdminUserPassword: !Sub '{{resolve:secretsmanager:${RedshiftSecret}::password}}'
    DbName: !Sub '{{resolve:secretsmanager:${RedshiftSecret}::dbname}}'
    DefaultIamRoleArn: !GetAtt IAMRoleRedshiftServerless.Arn
    IamRoles:
      - !GetAtt IAMRoleRedshiftServerless.Arn
    KmsKeyId: !Ref KmsKey
    FinalSnapshotName: !Sub '${Environment}-redshift-snapshot'
    FinalSnapshotRetentionPeriod: 30
    LogExports:
      - useractivitylog
    NamespaceName: !Sub '${Environment}-redshift-serverless-ns'

RedshiftServerlessWorkgroup:
  Type: 'AWS::RedshiftServerless::Workgroup'
  Properties:
    BaseCapacity: 96
    EnhancedVpcRouting: false
    # MaxCapacity: 96 //Commented as it is not yet supported via CFN
    NamespaceName: !Ref RedshiftServerlessNamespace
    Port: !Sub '{{resolve:secretsmanager:${RedshiftSecret}::port}}'
    PubliclyAccessible: false
    SubnetIds:
      - !Ref SubnetForDAP1
      - !Ref SubnetForDAP2
      - !Ref SubnetForDAP3
    WorkgroupName: !Sub '${Environment}-redshift-serverless-workgroup'
  Metadata:
    cfn-lint:
      config:
        ignore_checks:
          - E3002

RedshiftAccessEC2SecurityGroup:
  Type: 'AWS::EC2::SecurityGroup'
  Properties:
    GroupDescription: 'Security Group for Redshift Access EC2'
    VpcId: !Ref VPCForDAP
    SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
        Description: Allow egress to anywhere

VPCDefaultSecurityGroupRedshiftIngress:
  Type: AWS::EC2::SecurityGroupIngress
  Properties:
    GroupId: !GetAtt VPCForDAP.DefaultSecurityGroup
    IpProtocol: tcp
    FromPort: 5439
    ToPort: 5439
    SourceSecurityGroupId: !Ref RedshiftAccessEC2SecurityGroup
    Description: Allow ingress into the VPC default security group for redshift traffic from the redshift access security group

VPCDefaultSecurityGroupEgressAll:
  Type: AWS::EC2::SecurityGroupEgress
  Properties:
    GroupId: !GetAtt VPCForDAP.DefaultSecurityGroup
    IpProtocol: -1
    FromPort: -1
    ToPort: -1
    CidrIp: 0.0.0.0/0
    Description: Allow all outbound traffic to any destination

VPCDefaultSecurityGroupAllIngress:
  Type: AWS::EC2::SecurityGroupIngress
  Properties:
    GroupId: !GetAtt VPCForDAP.DefaultSecurityGroup
    IpProtocol: -1
    FromPort: -1
    ToPort: -1
    SourceSecurityGroupId: !GetAtt VPCForDAP.DefaultSecurityGroup
    Description: Allow all ingress traffic within the same security group

RedshiftMigrationRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: !Sub ${Environment}-dap-redshift-migrate-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
          Action: 'sts:AssumeRoleWithWebIdentity'
          Condition:
            StringLike:
              'token.actions.githubusercontent.com:sub':
                - repo:govuk-one-login/data-analytics-platform:ref:refs/heads/*
                - repo:govuk-one-login/data-analytics-platform:environment:*
    Policies:
      - PolicyName: !Sub ${Environment}-dap-redshift-migrate-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !GetAtt RunFlywayCommandLambda.Arn

RunFlywayCommandLambda:
  # checkov:skip=CKV_AWS_116: DLQ not needed
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: run-flyway-command
    Handler: run-flyway-command.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !Ref RedshiftSecret
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:GenerateDataKey
            Resource: !GetAtt KmsKey.Arn
            Condition:
              StringEquals:
                kms:EncryptionContext:SecretARN: !Ref RedshiftSecret
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !Sub ${FlywayFilesBucket.Arn}
              - !Sub ${FlywayFilesBucket.Arn}/*
    ReservedConcurrentExecutions: 10
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        REDSHIFT_SECRET_ID: !Ref RedshiftSecret
        FLYWAY_FILES_BUCKET_NAME: !Ref FlywayFilesBucket
        ENVIRONMENT: !Ref Environment
    Tags:
      Environment: !Ref Environment
    MemorySize: 2048
    Timeout: 600
    EphemeralStorage:
      Size: 1024
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
        - !Ref RedshiftAccessEC2SecurityGroup
      SubnetIds:
        - !Ref SubnetForDAP1
        - !Ref SubnetForDAP2
        - !Ref SubnetForDAP3

FlywayFilesBucket:
  Type: AWS::S3::Bucket
  Properties:
    AccessControl: Private
    BucketName: !Sub ${Environment}-dap-flyway-files
    LoggingConfiguration:
      DestinationBucketName: !Ref GlobalLogBucket
      LogFilePrefix: dap-flyway-files/log
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    VersioningConfiguration:
      Status: Enabled
    LifecycleConfiguration:
      Rules:
        - ExpirationInDays: 365
          Status: Enabled
    NotificationConfiguration:
      EventBridgeConfiguration:
        EventBridgeEnabled: true

FlywayFilesBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref FlywayFilesBucket
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Deny
          Action: 's3:*'
          Resource: !Sub ${FlywayFilesBucket.Arn}/*
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport: false
        - Effect: Allow
          Action:
            - s3:DeleteObject
            - s3:DeleteObjectVersion
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:ListBucket
            - s3:ListBucketVersions
            - s3:PutObject
          Resource:
            - !Sub ${FlywayFilesBucket.Arn}
            - !Sub ${FlywayFilesBucket.Arn}/*
          Principal:
            AWS: !Sub arn:aws:iam::${BuildAccountId}:role/dap-flyway-files-upload-role

FlywayFilesBucketUploadRole:
  Condition: IsBuild
  Type: AWS::IAM::Role
  Properties:
    RoleName: dap-flyway-files-upload-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringLike:
              'token.actions.githubusercontent.com:sub':
                - repo:govuk-one-login/data-analytics-platform:ref:refs/heads/*
                - repo:govuk-one-login/data-analytics-platform:environment:*
    Policies:
      - PolicyName: dap-flyway-files-upload-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:ListBucket
                - s3:ListBucketVersions
                - s3:PutObject
              Resource:
                - arn:aws:s3:::*-dap-flyway-files
                - arn:aws:s3:::*-dap-flyway-files/*

# Role to allow the data-analytics-adm repository the access to Redshift and related resources it needs
DataAnalyticsADMRedshiftRole:
  Type: AWS::IAM::Role
  Condition: IsADMEnvironment
  Properties:
    RoleName: !Sub data-analytics-adm-redshift-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringLike:
              'token.actions.githubusercontent.com:sub': repo:govuk-one-login/data-analytics-adm:*
    Policies:
      - PolicyName: !Sub data-analytics-adm-redshift-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: kms:Decrypt
              Resource: !GetAtt KmsKey.Arn
            - Effect: Allow
              Action: redshift-data:ExecuteStatement
              Resource: !GetAtt RedshiftServerlessWorkgroup.Workgroup.WorkgroupArn
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref RedshiftSecret
            - Effect: Allow
              Action:
                - redshift-data:DescribeStatement
                - redshift-data:GetStatementResult
              Resource: '*'
