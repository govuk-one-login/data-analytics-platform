RedshiftGetMetadataLambda:
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub redshift-get-metadata-${Environment}-2
    Handler: redshift-get-metadata.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub ${ELTMetadataBucket.Arn}/*
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:Encrypt
            Resource: !GetAtt KmsKey.Arn
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-reference-data-processing-dlq-2.fifo
    ReservedConcurrentExecutions: 10
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        ENVIRONMENT: !Ref Environment
        METADATA_BUCKET_NAME: !Ref ELTMetadataBucket
    Tags:
      Environment: !Ref Environment
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref SubnetForDAP1
        - !Ref SubnetForDAP2
        - !Ref SubnetForDAP3
    DeadLetterQueue:
      TargetArn: !GetAtt LambdaDeadLetterQueue.Arn
      Type: SQS

GlueJobResultsBucket:
  Type: 'AWS::S3::Bucket'
  Properties:
    AccessControl: Private
    BucketName: !Sub ${Environment}-dap-glue-job-process-results-2
    LoggingConfiguration:
      DestinationBucketName: !Ref GlobalLogBucket
      LogFilePrefix: dap-glue-job-process-results-2/log
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    VersioningConfiguration:
      Status: Enabled
    LifecycleConfiguration:
      Rules:
        - ExpirationInDays: 365
          Status: Enabled
    NotificationConfiguration:
      EventBridgeConfiguration:
        EventBridgeEnabled: true

GlueJobResultsBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref GlueJobResultsBucket
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Deny
          Action: 's3:*'
          Resource: !Sub ${GlueJobResultsBucket.Arn}/*
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport: false
        - Effect: Allow
          Action:
            - 's3:Get*'
            - 's3:Put*'
            - 's3:List*'
            - 's3:ListBucketMultipartUploads'
            - 's3:AbortMultipartUpload'
            - 's3:ListBucket'
            - 's3:GetBucketLocation'
            - 's3:ListMultipartUploadParts'
          Resource:
            - !Sub ${GlueJobResultsBucket.Arn}
            - !Sub ${GlueJobResultsBucket.Arn}/*
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root

ReferenceDataSQSQueue:
  Type: AWS::SQS::Queue
  Properties:
    ContentBasedDeduplication: true
    FifoQueue: true
    QueueName: !Sub ${Environment}-dap-reference-data-processing-2.fifo
    KmsMasterKeyId: !GetAtt KmsKey.Arn
    RedrivePolicy:
      deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
      maxReceiveCount: 1
    VisibilityTimeout: 120

DeadLetterQueue:
  Type: AWS::SQS::Queue
  Properties:
    FifoQueue: true
    QueueName: !Sub ${Environment}-reference-data-processing-dlq-2.fifo
    KmsMasterKeyId: !GetAtt KmsKey.Arn

LambdaDeadLetterQueue:
  Type: AWS::SQS::Queue
  Properties:
    QueueName: !Sub ${Environment}-reference-data-processing-lambda-dlq-2
    KmsMasterKeyId: !GetAtt KmsKey.Arn

ProcessReferenceDataLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: /aws/stepfunction/dap-reference-data-redshift-ingestion-2
    KmsKeyId: !GetAtt KmsKey.Arn
    RetentionInDays: 30

ProcessReferenceDataStateMachine:
  Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
  Properties:
    DefinitionUri: statemachine/reference_data_processing.asl.json
    Name: !Sub ${Environment}-dap-reference-data-redshift-ingestion-2
    Role: !GetAtt StepFunctionRole.Arn
    Logging:
      Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt ProcessReferenceDataLogGroup.Arn
      IncludeExecutionData: true
      Level: ALL
    DefinitionSubstitutions:
      ReferenceDataIngestionGlueJobName: !Ref ReferenceDataRedshiftIngestionGlueJob
      GetRedshiftMetadataFunctionArn: !GetAtt RedshiftGetMetadataLambda.Arn
      ValidateFIFOExecutionFunctionArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stepfunction-validate-execution-${Environment}-2

ReferenceDataProcessingPipeRole:
  Type: 'AWS::IAM::Role'
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: 'Allow'
          Principal:
            Service: 'pipes.amazonaws.com'
          Action: 'sts:AssumeRole'
    Policies:
      - PolicyName: 'BaseInlinePolicy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'AccessToCloudWatch'
              Effect: 'Allow'
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: arn:aws:logs:*:*:*
            - Sid: 'UseSqsAsSource'
              Effect: 'Allow'
              Action:
                - 'sqs:ReceiveMessage'
                - 'sqs:DeleteMessage'
                - 'sqs:GetQueueAttributes'
              Resource: !GetAtt 'ReferenceDataSQSQueue.Arn'
            - Sid: 'ExecuteSfnWorkflowAsTarget'
              Effect: 'Allow'
              Action:
                - 'states:StartSyncExecution'
                - 'states:StartExecution'
                - 'states:ListExecutions'
              Resource: !Ref 'ProcessReferenceDataStateMachine'
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:DescribeKey
                - kms:GenerateDataKey
              Resource: !GetAtt KmsKey.Arn

ReferenceDataProcessingPipe:
  Type: 'AWS::Pipes::Pipe'
  Properties:
    RoleArn: !GetAtt 'ReferenceDataProcessingPipeRole.Arn'
    Source: !GetAtt 'ReferenceDataSQSQueue.Arn'
    SourceParameters:
      SqsQueueParameters:
        BatchSize: 1
    Target: !Ref 'ProcessReferenceDataStateMachine'
    TargetParameters:
      StepFunctionStateMachineParameters:
        InvocationType: 'FIRE_AND_FORGET'

GlueRedshiftConnection:
  Type: AWS::Glue::Connection
  Properties:
    CatalogId: !Ref AWS::AccountId
    ConnectionInput:
      Name: !Sub ${Environment}-redshift-connection-2
      ConnectionType: 'JDBC'
      ConnectionProperties:
        JDBC_CONNECTION_URL: !Sub 'jdbc:redshift://${Environment}-redshift-serverless-workgroup.${AWS::AccountId}.${AWS::Region}.redshift-serverless.amazonaws.com:5439/dap_txma_reporting_db_refactored_2'
        SECRET_ID: !Ref RedshiftSecret
      PhysicalConnectionRequirements:
        SecurityGroupIdList:
          - !GetAtt VPCForDAP.DefaultSecurityGroup
        SubnetId: !Ref SubnetForDAP3

ReferenceDataRedshiftIngestionGlueJob:
  Type: AWS::Glue::Job
  Properties:
    Command:
      Name: 'glueetl'
      ScriptLocation: !Sub s3://${ELTMetadataBucket}/reference_data/manual_curated_dataset_ingestion/scripts/reference_data_redshift_ingestion_script.py
    GlueVersion: '4.0'
    NumberOfWorkers: 2
    WorkerType: 'G.1X'
    Connections:
      Connections:
        - !Ref GlueRedshiftConnection
    DefaultArguments:
      '--JOB_NAME': !Sub ${Environment}-reference-data-redshift-ingestion-job-2
      '--TempDir': !Sub s3://${GlueJobResultsBucket}/temporary/
      '--RedshiftTempDir': !Sub s3://${GlueJobResultsBucket}/redshift/temporary/
      '--GlueConnection': !Ref GlueRedshiftConnection
    ExecutionProperty:
      MaxConcurrentRuns: 10
    MaxRetries: 0
    SecurityConfiguration: !Ref GlueSecurityConfig
    Name: !Sub ${Environment}-reference-data-redshift-ingestion-job-2
    Role: !Ref GlueScriptsExecutionRole

S3SendMetadataLambda:
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub s3-send-metadata-${Environment}-2
    Handler: s3-send-metadata.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt ReferenceDataSQSQueue.Arn
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:Encrypt
            Resource: !GetAtt KmsKey.Arn
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-reference-data-processing-dlq-2.fifo
    ReservedConcurrentExecutions: 10
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        ENVIRONMENT: !Ref Environment
        METADATA_QUEUE_URL: !Ref ReferenceDataSQSQueue
    Tags:
      Environment: !Ref Environment
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref SubnetForDAP1
        - !Ref SubnetForDAP2
        - !Ref SubnetForDAP3
    DeadLetterQueue:
      TargetArn: !GetAtt LambdaDeadLetterQueue.Arn
      Type: SQS

S3SendMetadataLambdaPermission:
  Type: AWS::Lambda::Permission
  Properties:
    FunctionName: !Ref S3SendMetadataLambda
    Action: lambda:InvokeFunction
    Principal: s3.amazonaws.com
    SourceAccount: !Sub ${AWS::AccountId}
    SourceArn: !Sub arn:aws:s3:::${Environment}-dap-stage-layer-2

S3RawToStagingLambda:
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub s3-raw-to-staging-${Environment}-2
    Handler: s3-raw-to-staging.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource:
              - !Sub ${ELTMetadataBucket.Arn}/*
              - !Sub arn:aws:s3:::${Environment}-dap-raw-layer-2/*
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Sub ${StageLayerBucket.Arn}/*
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:Encrypt
            Resource: !GetAtt KmsKey.Arn
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-reference-data-processing-dlq-2.fifo
    ReservedConcurrentExecutions: 10
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        ENVIRONMENT: !Ref Environment
        METADATA_BUCKET_NAME: !Ref ELTMetadataBucket
        STAGE_BUCKET_NAME: !Ref StageLayerBucket
    Tags:
      Environment: !Ref Environment
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref SubnetForDAP1
        - !Ref SubnetForDAP2
        - !Ref SubnetForDAP3
    DeadLetterQueue:
      TargetArn: !GetAtt LambdaDeadLetterQueue.Arn
      Type: SQS

S3RawToStagingLambdaPermission:
  Type: AWS::Lambda::Permission
  Properties:
    FunctionName: !Ref S3RawToStagingLambda
    Action: lambda:InvokeFunction
    Principal: s3.amazonaws.com
    SourceAccount: !Sub ${AWS::AccountId}
    SourceArn: !Sub arn:aws:s3:::${Environment}-dap-raw-layer-2

ManualReferenceDataUploadRole:
  Condition: IsManualReferenceDataEnvironment
  Type: AWS::IAM::Role
  Properties:
    RoleName: !Sub ${Environment}-dap-manual-reference-data-upload-role-2
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringLike:
              'token.actions.githubusercontent.com:sub': repo:govuk-one-login/data-analytics-reference-data:*
    Policies:
      - PolicyName: !Sub ${Environment}-dap-manual-reference-data-upload-policy-2
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: s3:PutObject
              Resource: !Sub arn:aws:s3:::${Environment}-dap-raw-layer-2/reference-data/*

ProcessReferenceDapAlertLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: /aws/events/reference-data-ingestion-pipeline-alert-2
    KmsKeyId: !GetAtt KmsKey.Arn
    RetentionInDays: 30

ReferenceDataIngestionAlertingEventRule:
  Type: AWS::Events::Rule
  Properties:
    Description: 'Reference Data Ingestion Alerting EventRule'
    EventPattern:
      source:
        - reference-data-ingestion-pipeline-2
    State: 'ENABLED'
    Targets:
      - Arn: !GetAtt ProcessReferenceDapAlertLogGroup.Arn
        Id: 'SendToCloudWatchLog2'
      - Arn: !Ref SNSReferenceDataAlertTopic
        Id: 'SendToSnsTopic2'
        InputTransformer:
          InputPathsMap:
            data_file: $.detail.filepath
            start_date: $.time
            source: $.source
            ingestion_status: $.detail-type
          InputTemplate: |-
            {
                "version": "1.0",
                "source": "custom",
                "id": "reference-data-ingestion-pipeline-alert-2",
                "content": {
                  "textType": "client-markdown",
                  "title": ":Alert: Reference Data Ingestion Status Alert",
                  "description": "Ingestion process status alert.",
                  "nextSteps": [
                    "Ingestion pipeline: <source>",
                    "status: <ingestion_status>",
                    "startDate: <start_date>",
                    "file: <data_file>",
                    "Reference data ingestion alert, please review if process has failed."
                  ],
                  "keywords": [
                    "Reference data ingestion feedback",
                    "Warning",
                    "Review status and action if required"
                  ]
                }
              }

ReferenceDataTopicRoutingPolicy:
  Type: AWS::SNS::TopicPolicy
  Properties:
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Sid: Events_publish
          Effect: Allow
          Principal:
            Service: 'events.amazonaws.com'
          Action:
            - SNS:Publish
          Resource: !Ref SNSReferenceDataAlertTopic
    Topics:
      - !Ref SNSReferenceDataAlertTopic

SNSReferenceDataAlertTopic:
  Type: AWS::SNS::Topic
  Properties:
    TopicName: !Sub ${Environment}-reference-data-ingestion-alerts-topic-2
    KmsMasterKeyId: !GetAtt KmsKey.Arn

DLQLambda:
  # checkov:skip=CKV_AWS_116: DLQ not appropriate as this lambda receives events from the DLQ
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub dlq-to-eventbridge-${Environment}-2
    Events:
      ReceiveFromDLQ:
        Type: SQS
        Properties:
          BatchSize: 1
          Queue: !GetAtt DeadLetterQueue.Arn
          FunctionResponseTypes:
            - ReportBatchItemFailures
      ReceiveFromLambdaDLQ:
        Type: SQS
        Properties:
          BatchSize: 1
          Queue: !GetAtt LambdaDeadLetterQueue.Arn
          FunctionResponseTypes:
            - ReportBatchItemFailures
    Handler: dlq-to-eventbridge.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ReceiveMessage
            Resource:
              - !GetAtt DeadLetterQueue.Arn
              - !GetAtt LambdaDeadLetterQueue.Arn
          - Effect: Allow
            Action: kms:decrypt
            Resource: !GetAtt KmsKey.Arn
          - Effect: Allow
            Action: events:PutEvents
            Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
    ReservedConcurrentExecutions: 10
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        ENVIRONMENT: !Ref Environment
    Tags:
      Environment: !Ref Environment
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref SubnetForDAP1
        - !Ref SubnetForDAP2
        - !Ref SubnetForDAP3

VPCEndpointEventBridge:
  Type: AWS::EC2::VPCEndpoint
  Properties:
    VpcEndpointType: Interface
    ServiceName: com.amazonaws.eu-west-2.events
    VpcId: !Ref VPCForDAP
    PrivateDnsEnabled: true
    SecurityGroupIds:
      - !Ref LambdaSecurityGroup
    SubnetIds:
      - !Ref SubnetForDAP1
      - !Ref SubnetForDAP2
      - !Ref SubnetForDAP3

StepFunctionValidationLambda:
  # checkov:skip=CKV_AWS_116: DLQ not appropriate as this lambda receives events from the DLQ
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub stepfunction-validate-execution-${Environment}-2
    Handler: stepfunction-validate-execution.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action: states:DescribeExecution
            Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${ProcessReferenceDataStateMachine.Name}:*
          - Effect: Allow
            Action: states:ListExecutions
            Resource: !Ref ProcessReferenceDataStateMachine
    ReservedConcurrentExecutions: 10
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        ENVIRONMENT: !Ref Environment
        STATE_MACHINE_ARN: !Ref ProcessReferenceDataStateMachine
    Tags:
      Environment: !Ref Environment
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref SubnetForDAP1
        - !Ref SubnetForDAP2
        - !Ref SubnetForDAP3
