# Lambda function to process Redshift errors and send detailed notifications
RedshiftErrorNotificationLambda:
  # checkov:skip=CKV_AWS_116: DLQ not needed for lambda driven by SQS
  # checkov:skip=CKV_AWS_115:Not setting concurrent execution limits,
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub ${Environment}-dap-redshift-error-notification
    Handler: redshift-error-notification.handler
    Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref DAPNotificationsTopic
    ReservedConcurrentExecutions: 5
    Environment:
      # checkov:skip=CKV_AWS_173: These environment variables do not require encryption
      Variables:
        SNS_TOPIC_ARN: !Ref DAPNotificationsTopic
    Tags:
      Environment: !Ref Environment
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref SubnetForDAP1
        - !Ref SubnetForDAP2
        - !Ref SubnetForDAP3

# CloudWatch subscription filter to trigger Lambda on Redshift errors
RedshiftErrorSubscriptionFilter:
  Type: AWS::Logs::SubscriptionFilter
  Properties:
    LogGroupName: /aws/stepfunction/dap-consolidated-stage-layer-to-redshift
    FilterPattern: '{ ($.details.output = "*FAILED*") && ($.details.output = "*Error*") }'
    DestinationArn: !GetAtt RedshiftErrorNotificationLambda.Arn

# Permission for CloudWatch Logs to invoke the Lambda
RedshiftErrorLambdaInvokePermission:
  Type: AWS::Lambda::Permission
  Properties:
    FunctionName: !Ref RedshiftErrorNotificationLambda
    Action: lambda:InvokeFunction
    Principal: logs.amazonaws.com
    SourceArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/stepfunction/dap-consolidated-stage-layer-to-redshift:*
