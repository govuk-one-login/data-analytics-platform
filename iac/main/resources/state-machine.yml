ELTMetadataBucket:
  Type: 'AWS::S3::Bucket'
  Properties:
    AccessControl: Private
    BucketName: !Sub ${Environment}-dap-elt-metadata
    LoggingConfiguration:
      DestinationBucketName: !Ref GlobalLogBucket
      LogFilePrefix: dap-elt-metadata/log
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    VersioningConfiguration:
      Status: Enabled
    NotificationConfiguration:
      EventBridgeConfiguration:
        EventBridgeEnabled: true

ELTMetadataUploadRole:
  Condition: IsBuild
  Type: AWS::IAM::Role
  Properties:
    RoleName: dap-elt-metadata-upload-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
          Action: 'sts:AssumeRoleWithWebIdentity'
          Condition:
            StringLike:
              'token.actions.githubusercontent.com:sub':
                - repo:govuk-one-login/data-analytics-platform:ref:refs/heads/*
                - repo:govuk-one-login/data-analytics-platform:environment:*
    Policies:
      - PolicyName: dap-elt-metadata-upload-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:GetObject'
                - 's3:GetObjectVersion'
                - 's3:ListBucket'
                - 's3:ListBucketVersions'
                - 's3:PutObject'
              Resource:
                - arn:aws:s3:::*-dap-elt-metadata
                - arn:aws:s3:::*-dap-elt-metadata/*

ELTMetadataBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref ELTMetadataBucket
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Deny
          Action: 's3:*'
          Principal: '*'
          Resource:
            - !Sub arn:aws:s3:::${Environment}-dap-elt-metadata
            - !Sub arn:aws:s3:::${Environment}-dap-elt-metadata/*
          Condition:
            Bool:
              aws:SecureTransport: false
        - Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${BuildAccountId}:role/dap-elt-metadata-upload-role
          Action:
            - 's3:GetObject'
            - 's3:GetObjectVersion'
            - 's3:ListBucket'
            - 's3:ListBucketVersions'
            - 's3:PutObject'
          Resource:
            - !Sub arn:aws:s3:::${Environment}-dap-elt-metadata
            - !Sub arn:aws:s3:::${Environment}-dap-elt-metadata/*

StateMachineResultsBucket:
  Type: 'AWS::S3::Bucket'
  Properties:
    AccessControl: Private
    BucketName: !Sub ${Environment}-dap-step-function-process-results
    LoggingConfiguration:
      DestinationBucketName: !Ref GlobalLogBucket
      LogFilePrefix: dap-step-function-process-results/log
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    VersioningConfiguration:
      Status: Enabled
    LifecycleConfiguration:
      Rules:
        - ExpirationInDays: 365
          Status: Enabled
    NotificationConfiguration:
      EventBridgeConfiguration:
        EventBridgeEnabled: true

StateMachineResultsBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref StateMachineResultsBucket
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Deny
          Action: 's3:*'
          Resource: !Sub ${StateMachineResultsBucket.Arn}/*
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport: false
        - Effect: Allow
          Action:
            - 's3:Get*'
            - 's3:Put*'
            - 's3:List*'
            - 's3:ListBucketMultipartUploads'
            - 's3:AbortMultipartUpload'
            - 's3:ListBucket'
            - 's3:GetBucketLocation'
            - 's3:ListMultipartUploadParts'
          Resource:
            - !Sub ${StateMachineResultsBucket.Arn}
            - !Sub ${StateMachineResultsBucket.Arn}/*
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root

AthenaRawLayerProcessingLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: !Sub /aws/stepfunction/dap-process-raw-layer
    KmsKeyId: !GetAtt KmsKey.Arn
    RetentionInDays: 30

StepFunctionRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: !Sub ${Environment}-dap-statemachine-processing-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - states.amazonaws.com
          Action:
            - sts:AssumeRole
    Path: /
    Policies:
      - PolicyName: !Sub ${Environment}-dap-statemachine-processing-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Resource: arn:aws:s3:::*
              Action:
                - s3:Get*
                - s3:Put*
                - s3:List*
                - s3:ListBucketMultipartUploads
                - s3:AbortMultipartUpload
                - s3:CreateBucket
                - s3:ListBucket
                - s3:GetBucketLocation
                - s3:ListMultipartUploadParts

            - Effect: Allow
              Resource: '*'
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
                - logs:GetLogEvents

            - Effect: Allow
              Resource: !Sub arn:aws:glue:*:${AWS::AccountId}:crawler/*
              Action:
                - glue:GetCrawler
                - glue:GetCrawlers
                - glue:ListCrawlers
                - glue:ListCrawler
                - glue:StartCrawler
                - glue:StartCrawlerSchedule

            - Effect: Allow
              Resource:
                - !Join [':', [!GetAtt AthenaGetConfigLambda.Arn, '$LATEST']]
                - !Join [':', [!GetAtt AthenaGetStatementLambda.Arn, '$LATEST']]
                # manually construct ARN below to avoid a circular dependency
                - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:redshift-get-metadata-${Environment}:$LATEST
                - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stepfunction-validate-execution-${Environment}:$LATEST
              Action: lambda:InvokeFunction

            - Effect: Allow
              Resource:
                - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Environment}-dap-raw-to-stage-process'
                - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Environment}-dap-redshift-processing'
                - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Environment}-dap-txma-raw-consolidated-schema-to-stage-process'
                - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Environment}-dap-consolidated-stage-layer-to-redshift-processing'
              Action:
                - states:ListExecutions
                - states:StartExecution

            - Effect: Allow
              Resource: '*'
              Action:
                - athena:GetTableMetadata
                - athena:ListEngineVersions
                - athena:ListDataCatalogs
                - athena:ListDatabases
                - athena:GetDatabase
                - athena:ListTableMetadata
                - athena:ListWorkGroups

            - Effect: Allow
              Resource:
                - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${Environment}-dap-txma-processing'
                - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/*'
              Action:
                - athena:CreatePreparedStatement
                - athena:StartQueryExecution
                - athena:GetQueryResultsStream
                - athena:UpdatePreparedStatement
                - athena:GetQueryResults
                - athena:DeletePreparedStatement
                - athena:DeleteNamedQuery
                - athena:GetNamedQuery
                - athena:GetPreparedStatement
                - athena:ListQueryExecutions
                - athena:ListNamedQueries
                - athena:GetWorkGroup
                - athena:CreateNamedQuery
                - athena:StopQueryExecution
                - athena:GetQueryExecution
                - athena:BatchGetNamedQuery
                - athena:ListPreparedStatements
                - athena:BatchGetQueryExecution
                - athena:getDataCatalog

            - Effect: Allow
              Resource:
                - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
                - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/*'
                - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/*'
              Action:
                - glue:CreateDatabase
                - glue:GetDatabase
                - glue:GetDatabases
                - glue:UpdateDatabase
                - glue:DeleteDatabase
                - glue:CreateTable
                - glue:UpdateTable
                - glue:GetTable
                - glue:GetTables
                - glue:DeleteTable
                - glue:BatchDeleteTable
                - glue:BatchCreatePartition
                - glue:CreatePartition
                - glue:UpdatePartition
                - glue:GetPartition
                - glue:GetPartitions
                - glue:BatchGetPartition
                - glue:DeletePartition
                - glue:BatchDeletePartition

            - Effect: Allow
              Resource: '*'
              Action:
                - glue:StartJobRun
                - glue:GetJobRun
                - glue:GetJobRuns
                - glue:BatchStopJobRun

            - Effect: Allow
              Resource: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule'
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule

            - Effect: Allow
              Resource:
                - !Sub 'arn:aws:redshift-serverless:${AWS::Region}:${AWS::AccountId}:workgroup/*'

              Action:
                - redshift-data:BatchExecuteStatement
                - redshift-data:ExecuteStatement
                - redshift-serverless:GetCredentials

            - Effect: Allow
              Resource:
                - '*'

              Action:
                - redshift-data:GetStatementResult
                - redshift-data:DescribeStatement
                - redshift-data:ListStatements

            - Effect: Allow
              Resource:
                - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default'

              Action:
                - events:PutEvents

TxmaRawConsolidatedSchemaToStageProcessStateMachineArnParameter:
  Type: AWS::SSM::Parameter
  Condition: IsDevOrBuild
  Properties:
    Name: !Sub /tests/${AWS::StackName}/rawToStageStepFunction
    Type: String
    Value: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Environment}-dap-txma-raw-consolidated-schema-to-stage-process'

DataQualityMetricsBucket:
  Type: 'AWS::S3::Bucket'
  Properties:
    AccessControl: Private
    BucketName: !Sub ${Environment}-dap-data-quality-metrics
    LoggingConfiguration:
      DestinationBucketName: !Ref GlobalLogBucket
      LogFilePrefix: dap-data-quality-metrics/log
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    VersioningConfiguration:
      Status: Enabled
    NotificationConfiguration:
      EventBridgeConfiguration:
        EventBridgeEnabled: true

DataQualityMetricsBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref DataQualityMetricsBucket
    PolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Deny
          Action: 's3:*'
          Resource: !Sub ${DataQualityMetricsBucket.Arn}/*
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport: false
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource: !Sub ${DataQualityMetricsBucket.Arn}/*
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root

DataQualityGlueDatabase:
  Type: AWS::Glue::Database
  Properties:
    CatalogId: !Sub ${AWS::AccountId}
    DatabaseInput:
      Name: !Sub ${Environment}-txma-data-quality-metrics

DataQualityMetricsGlueTable:
  Type: AWS::Glue::Table
  Properties:
    CatalogId: !Sub ${AWS::AccountId}
    DatabaseName: !Ref DataQualityGlueDatabase
    TableInput:
      Name: data_quality_metrics
      TableType: EXTERNAL_TABLE
      StorageDescriptor:
        Columns:
          - { Name: data_layer, Type: string }
          - { Name: table_name, Type: string }
          - { Name: event_name, Type: string }
          - { Name: year, Type: string }
          - { Name: month, Type: string }
          - { Name: day, Type: string }
          - { Name: processed_dt, Type: string }
          - { Name: metric_name, Type: string }
          - { Name: metric_value, Type: string }
          - { Name: metric_desc, Type: string }
          - { Name: created_datetime, Type: string }
        InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
        Location: !Sub s3://${DataQualityMetricsBucket}/data_quality_metrics/
        OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
        SerdeInfo:
          Parameters:
            serialiazation.format: 1
          SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe

DataQualityPythonGlueJob:
  Type: AWS::Glue::Job
  Properties:
    Command:
      Name: pythonshell
      PythonVersion: '3.9'
      ScriptLocation: !Sub s3://${ELTMetadataBucket}/txma/data_quality_metrics_script/data_quality_metrics_generation.py
    DefaultArguments:
      '--JOB_NAME': !Sub ${Environment}-dap-data-quality-metrics-generation
      '--additional-python-modules': 'awswrangler'
      '--env': !Sub ${Environment}
      '--raw_db': !Sub ${Environment}-txma-raw
      '--stage_db': !Sub ${Environment}-txma-stage
      '--reconcilation_db': !Ref DataQualityGlueDatabase
      '--reconcilation_tbl': !Ref DataQualityMetricsGlueTable
      '--s3_path': !Sub s3://${DataQualityMetricsBucket}/data_quality_metrics/
      '--TempDir': !Sub s3://${DataQualityMetricsBucket}/temporary/
      '--process_config': !Sub s3://${ELTMetadataBucket}/txma/
    ExecutionProperty:
      MaxConcurrentRuns: 1
    MaxRetries: 0
    SecurityConfiguration: !Ref GlueSecurityConfig
    Name: !Sub ${Environment}-dap-data-quality-metrics-generation
    Role: !Ref GlueScriptsExecutionRole

GlueScriptsExecutionRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: !Sub ${Environment}-dap-glue-scripts-execution-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - glue.amazonaws.com
          Action:
            - sts:AssumeRole
    Path: /
    Policies:
      - PolicyName: !Sub ${Environment}-dap-glue-scripts-execution-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Resource: arn:aws:s3:::*
              Action:
                - s3:Get*
                - s3:Put*
                - s3:List*
                - s3:ListBucketMultipartUploads
                - s3:AbortMultipartUpload
                - s3:CreateBucket
                - s3:ListBucket
                - s3:GetBucketLocation
                - s3:ListMultipartUploadParts

            - Effect: Allow
              Resource: arn:aws:logs:*:*:*
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
                - logs:AssociateKmsKey

            - Effect: Allow
              Resource: '*'
              Action:
                - athena:GetTableMetadata
                - athena:ListEngineVersions
                - athena:ListDataCatalogs
                - athena:ListDatabases
                - athena:GetDatabase
                - athena:ListTableMetadata
                - athena:ListWorkGroups

            - Effect: Allow
              Resource:
                - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${Environment}-dap-txma-processing'
                - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/primary'
                - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/*'
              Action:
                - athena:CreatePreparedStatement
                - athena:StartQueryExecution
                - athena:GetQueryResultsStream
                - athena:UpdatePreparedStatement
                - athena:GetQueryResults
                - athena:DeletePreparedStatement
                - athena:DeleteNamedQuery
                - athena:GetNamedQuery
                - athena:GetPreparedStatement
                - athena:ListQueryExecutions
                - athena:ListNamedQueries
                - athena:GetWorkGroup
                - athena:CreateNamedQuery
                - athena:StopQueryExecution
                - athena:GetQueryExecution
                - athena:BatchGetNamedQuery
                - athena:ListPreparedStatements
                - athena:BatchGetQueryExecution
                - athena:getDataCatalog

            - Effect: Allow
              Resource:
                - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
                - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/*'
                - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/*'
              Action:
                - glue:CreateDatabase
                - glue:GetDatabase
                - glue:GetDatabases
                - glue:UpdateDatabase
                - glue:DeleteDatabase
                - glue:CreateTable
                - glue:UpdateTable
                - glue:GetTable
                - glue:GetTables
                - glue:DeleteTable
                - glue:BatchDeleteTable
                - glue:BatchCreatePartition
                - glue:CreatePartition
                - glue:UpdatePartition
                - glue:GetPartition
                - glue:GetPartitions
                - glue:BatchGetPartition
                - glue:DeletePartition
                - glue:BatchDeletePartition

            - Effect: Allow
              Resource:
                - !Sub 'arn:aws:redshift-serverless:${AWS::Region}:${AWS::AccountId}:workgroup/*'
              Action:
                - redshift-data:BatchExecuteStatement
                - redshift-data:ExecuteStatement
                - redshift-serverless:GetCredentials

            - Effect: Allow
              Resource:
                - '*'
              Action:
                - redshift-data:GetStatementResult
                - redshift-data:DescribeStatement
                - redshift-data:ListStatements

            - Effect: Allow
              Resource:
                - '*'
              Action:
                - kms:*

            - Effect: Allow
              Resource:
                - '*'
              Action:
                - glue:GetConnection

            - Effect: Allow
              Resource:
                - '*'
              Action:
                - ec2:Describe*

            - Effect: Allow
              Resource:
                - '*'
              Action:
                - ec2:CreateNetworkInterface
                - ec2:Describe*
                - ec2:AssignPrivateIpAddresses
                - ec2:UnassignPrivateIpAddresses
                - ec2:CreateTags
                - secretsmanager:GetSecretValue

            - Effect: Allow
              Resource:
                - '*'
              Action:
                - glue:GetSecurityConfiguration

RedshiftProcessingLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: /aws/stepfunction/dap-redshift-processing
    KmsKeyId: !GetAtt KmsKey.Arn
    RetentionInDays: 30

RedshiftProcessingStateMachine:
  Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
  Properties:
    DefinitionUri: statemachine/redshift_elt_processing.asl.json
    Name: !Sub ${Environment}-dap-redshift-processing
    Role: !GetAtt StepFunctionRedshiftProcessRole.Arn
    Logging:
      Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt RedshiftProcessingLogGroup.Arn
      IncludeExecutionData: true
      Level: ALL
    DefinitionSubstitutions:
      S3MetaDataBucketName: !Ref ELTMetadataBucket
      RedshiftWorkgroup: !Ref RedshiftServerlessWorkgroup
      RedshiftDatabaseName: dap_txma_reporting_db
      StateMachineResultsBucket: !Ref StateMachineResultsBucket

StepFunctionRedshiftProcessRole:
  Type: AWS::IAM::Role
  # AWS issue identified enabling CW logs for Step Function as detailed in the following link
  # https://repost.aws/questions/QURc2glxBETSe3Q6Y0UwcpQg/bug-with-loggingconfiguration
  # checkov:skip=CKV_AWS_111:Ensure IAM policies does not allow write access without constraints
  Properties:
    RoleName: !Sub ${Environment}-dap-redshift-processing-role
    AssumeRolePolicyDocument:
      Version: 2012-10-17
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - states.amazonaws.com
          Action:
            - sts:AssumeRole
    Path: /
    Policies:
      - PolicyName: dap-statemachine-redshift-processing-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Resource:
                - arn:aws:s3:::*

              Action:
                - s3:Get*
                - s3:Put*
                - s3:List*
                - s3:ListBucketMultipartUploads
                - s3:AbortMultipartUpload
                - s3:CreateBucket
                - s3:ListBucket
                - s3:GetBucketLocation
                - s3:ListMultipartUploadParts

            - Effect: Allow
              Resource:
                - '*'

              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:DescribeLogStreams
                - logs:GetLogEvents
                - logs:PutLogEvents
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups

            - Effect: Allow
              Resource:
                - !Sub 'arn:aws:redshift-serverless:${AWS::Region}:${AWS::AccountId}:workgroup/*'

              Action:
                - redshift-data:BatchExecuteStatement
                - redshift-data:ExecuteStatement
                - redshift-serverless:GetCredentials

            - Effect: Allow
              Resource:
                - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Environment}-dap-redshift-processing'
                - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Environment}-dap-consolidated-stage-layer-to-redshift-processing'
                - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${Environment}-dap-consolidated-conformed-layer-to-adm-processing'
              Action:
                - states:ListExecutions
                - states:StartExecution

            - Effect: Allow
              Resource:
                - '*'

              Action:
                - states:ListStateMachines

            - Effect: Allow
              Resource:
                - '*'

              Action:
                - redshift-data:GetStatementResult
                - redshift-data:DescribeStatement
                - redshift-data:ListStatements
            - Effect: Allow
              Resource: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule'
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule
            - Effect: Allow
              Resource: !Sub 'arn:aws:secretsmanager:eu-west-2:${AWS::AccountId}:secret:*'
              Action:
                - secretsmanager:GetSecretValue

TxmaRawLayerConsolidatedSchemaProcessingStateMachine:
  Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
  Properties:
    DefinitionUri: statemachine/txma_raw_layer_consolidated_schema_processing.asl.json
    Name: !Sub ${Environment}-dap-txma-raw-consolidated-schema-to-stage-process
    Role: !GetAtt StepFunctionRole.Arn
    Logging:
      Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt AthenaRawLayerProcessingLogGroup.Arn
      IncludeExecutionData: true
      Level: ALL
    DefinitionSubstitutions:
      RawToStageProcessingGlueJobname: !Ref RawStageTransformProcessPythonGlueJob
      DataQualityGlueJobname: !Ref DataQualityStageLayerOptimisedPythonGlueJob
      RedshiftProcessingStepFunctionArn: !Ref RedshiftConsolidatedModelProcessingStateMachine
    Events:
      DailySchedule:
        Type: Schedule # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
        Properties:
          Schedule: cron(20 1 * * ? *)
          State: !If [IsDevOrBuild, DISABLED, ENABLED]

RawStageTransformProcessPythonGlueJob:
  Type: AWS::Glue::Job
  Properties:
    Command:
      Name: pythonshell
      PythonVersion: '3.9'
      ScriptLocation: !Sub s3://${ELTMetadataBucket}/txma/raw_to_stage/raw_to_stage_process_glue_job.py
    DefaultArguments:
      '--JOB_NAME': !Sub ${Environment}-dap-raw-stage-transform-process
      '--LOG_LEVEL': 'INFO'
      '--additional-python-modules': 'awswrangler,aws_lambda_powertools'
      '--config_bucket': !Sub ${ELTMetadataBucket}
      '--config_key_path': 'txma/raw_stage_optimisation_solution/configuration_rules/raw_to_stage_config_rules.json'
      '--raw_database': !Sub ${Environment}-txma-raw
      '--raw_source_table': 'txma-refactored'
      '--stage_bucket': !Sub ${StageLayerBucket}
      '--stage_database': !Sub ${Environment}-txma-stage
      '--stage_target_table': 'txma_stage_layer'
      '--stage_target_key_value_table': 'txma_stage_layer_key_values'
      '--txma_raw_dedup_view_key_path': 'txma/raw_stage_optimisation_solution/athena_db_object/txma_raw_dedup_view.sql'
      '--workgroup': !Sub ${Environment}-dap-txma-processing
      '--TempDir': !Sub s3://${StageLayerBucket}/raw_stage_optimisation_processing/temporary/
      'library-set': 'analytics'
      '--extra-py-files': !Sub 's3://${ELTMetadataBucket}/txma/raw_to_stage/raw_to_stage_etl_modules-0.1.0-py3-none-any.whl'
    ExecutionProperty:
      MaxConcurrentRuns: 1
    MaxRetries: 0
    MaxCapacity: 1
    SecurityConfiguration: !Ref GlueSecurityConfig
    Name: !Sub ${Environment}-dap-raw-stage-transform-process
    Role: !Ref GlueScriptsExecutionRole

StatemachineFailuerEventRule:
  Type: AWS::Events::Rule
  Properties:
    Description: 'ELT State Machine Failure EventRule Trigger'
    EventPattern:
      source:
        - aws.states
      detail-type:
        - 'Step Functions Execution Status Change'
      detail:
        status:
          - FAILED
          - ABORTED
          - TIMED_OUT
    State: 'ENABLED'
    Targets:
      - Arn: !Ref SNSAlertTopic
        Id: 'SendToSnsTopic'
        InputTransformer:
          InputPathsMap:
            executionArn: $.detail.executionArn
            startDate: $.time
            stateMachineArn: $.detail.stateMachineArn
            status: $.detail.status
          InputTemplate: |-
            {
                "version": "1.0",
                "source": "custom",
                "id": "elt_step_function_alert",
                "content": {
                  "textType": "client-markdown",
                  "title": ":Alert: ELT Step Function Failure Alert",
                  "description": "ELT step function process has failed, please review failed process.",
                  "nextSteps": [
                    "stateMachineArn <stateMachineArn>",
                    "executionArn: <executionArn>",
                    "status: <status>",
                    "startDate: <startDate>",
                    "DAP team please review!"
                  ],
                  "keywords": [
                    "ELT Step Function failure alert",
                    "Warning",
                    "Review action required"
                  ]
                }
              }

TopicRoutingPolicy:
  Type: AWS::SNS::TopicPolicy
  Properties:
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Sid: Events_publish
          Effect: Allow
          Principal:
            Service: 'events.amazonaws.com'
          Action:
            - SNS:Publish
          Resource: !Ref SNSAlertTopic
    Topics:
      - !Ref SNSAlertTopic

SNSAlertTopic:
  Type: AWS::SNS::Topic
  Properties:
    TopicName: !Sub ${Environment}-dap-elt-support-management-topic
    KmsMasterKeyId: !GetAtt KmsKey.Arn

DataQualityStageLayerOptimisedPythonGlueJob:
  Type: AWS::Glue::Job
  Properties:
    Command:
      Name: pythonshell
      PythonVersion: '3.9'
      ScriptLocation: !Sub s3://${ELTMetadataBucket}/txma/data_quality_metrics_script/data_quality_new_stage_metrics_generation.py
    DefaultArguments:
      '--JOB_NAME': !Sub ${Environment}-dap-data-quality-new-stage-metrics-generation
      '--additional-python-modules': 'awswrangler'
      '--env': !Sub ${Environment}
      '--stage_db': !Sub ${Environment}-txma-stage
      '--stage_parent_tbl': 'txma_stage_layer'
      '--reconcilation_db': !Ref DataQualityGlueDatabase
      '--reconcilation_tbl': !Ref DataQualityMetricsGlueTable
      '--s3_path': !Sub s3://${DataQualityMetricsBucket}/data_quality_metrics/
      '--TempDir': !Sub s3://${DataQualityMetricsBucket}/temporary/
    ExecutionProperty:
      MaxConcurrentRuns: 1
    MaxRetries: 0
    SecurityConfiguration: !Ref GlueSecurityConfig
    Name: !Sub ${Environment}-dap-data-quality-new-stage-metrics-generation
    Role: !Ref GlueScriptsExecutionRole

RedshiftConsolidatedModelProcessingLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: /aws/stepfunction/dap-consolidated-stage-layer-to-redshift
    KmsKeyId: !GetAtt KmsKey.Arn
    RetentionInDays: 30

ADMConsolidatedModelProcessingLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: /aws/stepfunction/dap-consolidated-conformed-layer-to-adm
    KmsKeyId: !GetAtt KmsKey.Arn
    RetentionInDays: 30

RedshiftConsolidatedModelProcessingStateMachine:
  Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
  Properties:
    DefinitionUri: statemachine/txma_redshift_consolidated_schema_processing.asl.json
    Name: !Sub ${Environment}-dap-consolidated-stage-layer-to-redshift-processing
    Role: !GetAtt StepFunctionRedshiftProcessRole.Arn
    Logging:
      Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt RedshiftConsolidatedModelProcessingLogGroup.Arn
      IncludeExecutionData: true
      Level: ALL
    DefinitionSubstitutions:
      S3MetaDataBucketName: !Ref ELTMetadataBucket
      RedshiftWorkgroup: !Ref RedshiftServerlessWorkgroup
      RedshiftDatabaseName: dap_txma_reporting_db_refactored
      StateMachineResultsBucket: !Ref StateMachineResultsBucket
      ADMProcessingStepFunctionArn:
        !If [IsADMEnvironment, !Ref ADMConsolidatedModelProcessingStateMachine, !Ref 'AWS::NoValue']
      IsADMEnvironment: !If [IsADMEnvironment, true, false]

ADMConsolidatedModelProcessingStateMachine:
  Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
  Condition: IsADMEnvironment
  Properties:
    DefinitionUri: statemachine/txma_adm_consolidated_schema_processing.asl.json
    Name: !Sub ${Environment}-dap-consolidated-conformed-layer-to-adm-processing
    Role: !GetAtt StepFunctionRedshiftProcessRole.Arn
    Logging:
      Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt ADMConsolidatedModelProcessingLogGroup.Arn
      IncludeExecutionData: true
      Level: ALL
    DefinitionSubstitutions:
      S3MetaDataBucketName: !Ref ELTMetadataBucket
      RedshiftWorkgroup: !Ref RedshiftServerlessWorkgroup
      RedshiftDatabaseName: dap_txma_reporting_db_refactored
      StateMachineResultsBucket: !Ref StateMachineResultsBucket
      RedshiftSecretArn: !Ref RedshiftSecret

SplunkMigratedRawStageTransformProcessPythonGlueJob:
  Type: AWS::Glue::Job
  Properties:
    Command:
      Name: pythonshell
      PythonVersion: '3.9'
      ScriptLocation: !Sub s3://${ELTMetadataBucket}/txma/raw_stage_optimisation_solution/scripts/raw_to_stage_process_glue_job.py
    DefaultArguments:
      '--JOB_NAME': !Sub ${Environment}-dap-splunk-migration-raw-stage-transform-process
      '--additional-python-modules': 'awswrangler'
      '--config_bucket': !Sub ${ELTMetadataBucket}
      '--config_key_path': 'txma/raw_stage_optimisation_solution/configuration_rules/splunk_to_stage_config_rules.json'
      '--raw_database': !Sub ${Environment}-txma-raw
      '--raw_source_table': 'splunk_migration'
      '--stage_bucket': !Sub ${StageLayerBucket}
      '--stage_database': !Sub ${Environment}-txma-stage
      '--stage_target_table': 'txma_stage_layer'
      '--stage_target_key_value_table': 'txma_stage_layer_key_values'
      '--txma_raw_dedup_view_key_path': 'txma/raw_stage_optimisation_solution/athena_db_object/txma_raw_dedup_view.sql'
      '--workgroup': !Sub ${Environment}-dap-txma-processing
      '--TempDir': !Sub s3://${StageLayerBucket}/raw_stage_optimisation_processing/temporary/
      'library-set': 'analytics'
      '--extra-py-files':
        !Join [
          ',',
          [
            !Sub 's3://${ELTMetadataBucket}/txma/raw_stage_optimisation_solution/scripts/AthenaReadWrite.py',
            !Sub 's3://${ELTMetadataBucket}/txma/raw_stage_optimisation_solution/scripts/core_preprocessing_functions.py',
            !Sub 's3://${ELTMetadataBucket}/txma/raw_stage_optimisation_solution/scripts/DataPreprocessing.py',
            !Sub 's3://${ELTMetadataBucket}/txma/raw_stage_optimisation_solution/scripts/GlueTableQueryAndWrite.py',
            !Sub 's3://${ELTMetadataBucket}/txma/raw_stage_optimisation_solution/scripts/S3ReadWrite.py',
          ],
        ]
    ExecutionProperty:
      MaxConcurrentRuns: 1
    MaxRetries: 0
    MaxCapacity: 1
    SecurityConfiguration: !Ref GlueSecurityConfig
    Name: !Sub ${Environment}-dap-splunk-migration-raw-stage-transform-process
    Role: !Ref GlueScriptsExecutionRole

HypercareAdjustedScheduleEventBridgeRule:
  Type: AWS::Events::Rule
  Properties:
    Description: Rule to be enabled when rps require hypercare during onboarding
    ScheduleExpression: 'cron(30 9,13 * * ? *)'
    Name: !Sub ${Environment}-dap-hypercare-eventbridge-rule
    State: DISABLED
    Targets:
      - Id: hypercare-adjusted-schedule-txma-statemachine
        Arn: !Ref TxmaRawLayerConsolidatedSchemaProcessingStateMachine
        RoleArn: !GetAtt HypercareAdjustedScheduleEventBridgeStateMachineInvokeRole.Arn

HypercareAdjustedScheduleEventBridgeStateMachineInvokeRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: !Sub ${Environment}-dap-hypercare-eventbridge-role
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: 'Allow'
          Principal:
            Service: 'events.amazonaws.com'
          Action: 'sts:AssumeRole'
    Policies:
      - PolicyName: !Sub ${Environment}-dap-hypercare-eventbridge-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action: 'states:StartExecution'
              Resource: !Ref TxmaRawLayerConsolidatedSchemaProcessingStateMachine
